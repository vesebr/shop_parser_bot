#!/usr/bin/python
# -*- coding: UTF-8 -*-

import json
import config
import datetime
import asyncio
import aioschedule as schedule
from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher, filters
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, Message
from aiogram.utils import executor
from googlesheet_table import GoogleTable
from shop_parser import parse


class TelegramBot(Bot):
    def __init__(
            self,
            token,
            parse_mode,
            google_table=None,
            flag: int = 0,
            flag2: int = 0,
            flag3: int = 0,
            shops=None,
            shop_links=None,
            user_id: str = None,
            user_ids=None,
            row_h: int = 2,
            row_d: int = 2,
            users=None,
            password: str = '57526748',  # '57526748',
            has_access: bool = False,
            user_list=None
    ):
        super().__init__(token, parse_mode=parse_mode)
        if user_list is None:
            user_list = []
        self.user_list: list = user_list
        if user_ids is None:
            user_ids = []
        if users is None:
            users = {}
        if shop_links is None:
            shop_links = []
        if shops is None:
            shops = {}
        self.users: dict = users
        self._google_table: GoogleTable = google_table
        self.flag: int = flag
        self.flag2: int = flag2
        self.flag3: int = flag3
        self.shops: dict = shops
        self.shop_links: list = shop_links
        self.user_ids: list = user_ids
        self.user_id: str = user_id
        self.row_h: int = row_h
        self.row_d: int = row_d
        self.password: str = password
        self.has_access: bool = has_access


bot = TelegramBot(
    token=config.settings["TOKEN"],
    parse_mode=types.ParseMode.HTML,
)

dp = Dispatcher(bot)


# bot.users={
#    "user_id": {
#        "shop_links": [shop_url_1, shop_url_2],
#        "sheet_link": google_sheet_url,
#        "shop_name":{
#             "title": "title",
#             "orders": "orders",
#             "reviews": "reviews",
#             "link": "link",
#             }
#        "flag": 0,
#        "flag2": 0,
#        "flag3": 0,
# }

@dp.message_handler(commands="test")
async def test(message: Message, link="https://kazanexpress.ru/auto-box16"):
    info = parse(link)
    await bot.send_message(message.from_user.id,
                           # text=f'üîª–ú–∞–≥–∞–∑–∏–Ω *<a href=bot.users[id_][link.split("/")[3]]["title"]"> {bot.users[id_][link.split("/")[3]]["link"]}</a>*\n–í—Å–µ–≥–æ –æ—Ç–∑—ã–≤–æ–≤: *{info["reviews"]}*\n\n    üì¶–ù–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤: *{info["orders"] - bot.users[id_][link.split("/")[3]]["hour"]["orders"]}*\n    ‚≠ê–ù–æ–≤—ã—Ö –æ—Ç–∑—ã–≤–æ–≤: *{info["reviews"] - bot.users[id_][link.split("/")[3]]["hour"]["reviews"]}*',
                           text=f'<a href="{bot.users[str(message.from_user.id)][link.split("/")[3]]["link"]}">{bot.users[str(message.from_user.id)][link.split("/")[3]]["title"]}</a>',
                           parse_mode="HTML", disable_web_page_preview=True)
    bot.users[str(message.from_user.id)][link.split("/")[3]]["hour"]["orders"] = info['orders']
    bot.users[str(message.from_user.id)][link.split("/")[3]]["hour"]["reviews"] = info['reviews']


@dp.message_handler(commands="start")
async def cmd_start(message: types.Message):
    bot.users[str(message.from_user.id)] = {
        "access": bot.has_access
    }
    if not bot.users[str(message.from_user.id)]["access"]:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å")


@dp.message_handler(text=["–í –º–µ–Ω—é", "–û—Ç–º–µ–Ω–∞"])
async def cmd_menu(message: types.Message):
    button1 = KeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –º–∞–≥–∞–∑–∏–Ω")
    button2 = KeyboardButton("–£–¥–∞–ª–∏—Ç—å –º–∞–≥–∞–∑–∏–Ω")
    button3 = KeyboardButton("–î–æ–±–∞–≤–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É")

    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.row(button1, button2).add(button3)

    bot.user_id = str(message.from_user.id)

    bot.users[str(message.from_user.id)]["flag"] = 0
    bot.users[str(message.from_user.id)]["flag2"] = 0
    bot.users[str(message.from_user.id)]["flag3"] = 0

    await message.answer("üîπ –í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é üîπ", reply_markup=keyboard)


@dp.message_handler(text='–î–æ–±–∞–≤–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É')
async def add_table(message: Message) -> None:
    bot.user_id = message.from_user.id
    bot.users[str(message.from_user.id)]["flag3"] = 1

    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    menu_button = KeyboardButton("–û—Ç–º–µ–Ω–∞")
    keyboard.add(menu_button)

    await bot.send_message(message.from_user.id, 'üî∑ –í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–∞–±–ª–∏—Ü—É üî∑', reply_markup=keyboard)


@dp.message_handler(text='–î–æ–±–∞–≤–∏—Ç—å –º–∞–≥–∞–∑–∏–Ω')
async def add_shop(message: Message) -> None:
    bot.users[str(message.from_user.id)]["flag"] = 1
    bot.user_id = message.from_user.id

    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    menu_button = KeyboardButton("–û—Ç–º–µ–Ω–∞")
    keyboard.add(menu_button)
    await bot.send_message(message.from_user.id, 'üî∑ –í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –º–∞–≥–∞–∑–∏–Ω üî∑', reply_markup=keyboard)


@dp.message_handler(filters.Regexp(regexp=r"^(https?:\/\/)?([\w-]{1,32}\.[\w-]{1,32})[^\s@]*$"))
async def collect_first_data(message: Message) -> None:
    if bot.users[str(message.from_user.id)]["flag"] == 1:
        url = str(message.text)
        try:
            info = parse(url)
            bot.users[str(message.from_user.id)][f"{url.split('/')[3]}"] = {
                "title": info["title"],
                "orders": info["orders"],
                "reviews": info["reviews"],
                "link": url,
                "name": str(url.split('/')[3]),
                "hour": {"orders": info["orders"],
                         "reviews": info["reviews"],
                         },
                "day": {"orders": info["orders"],
                        "reviews": info["reviews"], },
            }
            # a = url.split('/')[3]
            # await bot.send_message(message.from_user.id, f"–ù–∞–∑–≤–∞–Ω–∏–µ: {bot.users[str(message.from_user.id)][a]['title']}\n–ó–∞–∫–∞–∑–æ–≤: {bot.users[str(message.from_user.id)][a]['orders']}\n–û—Ç–∑—ã–≤–æ–≤: {bot.users[str(message.from_user.id)][a]['reviews']}")

            if url not in bot.users[str(message.from_user.id)]['shop_links']:
                bot.users[str(message.from_user.id)]['shop_links'].append(url)
                bot.users[str(message.from_user.id)]["shops_list"].append(
                    {f"{url.split('/')[3]}": bot.users[str(message.from_user.id)][f"{url.split('/')[3]}"]})
            bot.users[str(message.from_user.id)]["flag"] = 0
            await bot.send_message(message.from_user.id, f"‚úÖ –ú–∞–≥–∞–∑–∏–Ω *{info['title']}* —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω",
                                   parse_mode="Markdown")
            button1 = KeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –º–∞–≥–∞–∑–∏–Ω")
            button2 = KeyboardButton("–£–¥–∞–ª–∏—Ç—å –º–∞–≥–∞–∑–∏–Ω")
            button3 = KeyboardButton("–î–æ–±–∞–≤–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É")

            keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
            keyboard.row(button1, button2).add(button3)

            bot.user_id = str(message.from_user.id)

            bot.users[str(message.from_user.id)]["flag"] = 0
            bot.users[str(message.from_user.id)]["flag2"] = 0
            bot.users[str(message.from_user.id)]["flag3"] = 0

            await message.answer("üîπ –í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é üîπ", reply_markup=keyboard)
        except:
            await bot.send_message(message.from_user.id, "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Å—Å—ã–ª–∫–∏")

    elif bot.users[str(message.from_user.id)]["flag3"] == 1:
        bot.users[str(message.from_user.id)]['sheet_link'] = str(message.text)
        try:
            bot._google_table = GoogleTable("key.json", str(message.text))
            bot._google_table.add_sheet()
            bot._google_table.write_data("A1", "–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è", worksheet_title="–ó–∞–∫–∞–∑—ã –∑–∞ —á–∞—Å")
            bot._google_table.write_data("B1", "–ù–∞–∑–≤–∞–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞", worksheet_title="–ó–∞–∫–∞–∑—ã –∑–∞ —á–∞—Å")
            bot._google_table.write_data("C1", "–ù–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤", worksheet_title="–ó–∞–∫–∞–∑—ã –∑–∞ —á–∞—Å")
            bot._google_table.write_data("D1", "–ù–æ–≤—ã—Ö –æ—Ç–∑—ã–≤–æ–≤", worksheet_title="–ó–∞–∫–∞–∑—ã –∑–∞ —á–∞—Å")
            bot._google_table.write_data("A1", "–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è", worksheet_title="–ó–∞–∫–∞–∑—ã –∑–∞ —Å—É—Ç–∫–∏")
            bot._google_table.write_data("B1", "–ù–∞–∑–≤–∞–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞", worksheet_title="–ó–∞–∫–∞–∑—ã –∑–∞ —Å—É—Ç–∫–∏")
            bot._google_table.write_data("C1", "–ù–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤", worksheet_title="–ó–∞–∫–∞–∑—ã –∑–∞ —Å—É—Ç–∫–∏")
            bot._google_table.write_data("D1", "–ù–æ–≤—ã—Ö –æ—Ç–∑—ã–≤–æ–≤", worksheet_title="–ó–∞–∫–∞–∑—ã –∑–∞ —Å—É—Ç–∫–∏")
            bot.users[str(message.from_user.id)]["flag3"] = 0
            await bot.send_message(message.from_user.id, "–¢–∞–±–ª–∏—Ü–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞")
        except Exception:
            bot._google_table.write_data("A1", "–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è", worksheet_title="–ó–∞–∫–∞–∑—ã –∑–∞ —á–∞—Å")
            bot._google_table.write_data("B1", "–ù–∞–∑–≤–∞–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞", worksheet_title="–ó–∞–∫–∞–∑—ã –∑–∞ —á–∞—Å")
            bot._google_table.write_data("C1", "–ù–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤", worksheet_title="–ó–∞–∫–∞–∑—ã –∑–∞ —á–∞—Å")
            bot._google_table.write_data("D1", "–ù–æ–≤—ã—Ö –æ—Ç–∑—ã–≤–æ–≤", worksheet_title="–ó–∞–∫–∞–∑—ã –∑–∞ —á–∞—Å")
            bot._google_table.write_data("A1", "–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è", worksheet_title="–ó–∞–∫–∞–∑—ã –∑–∞ —Å—É—Ç–∫–∏")
            bot._google_table.write_data("B1", "–ù–∞–∑–≤–∞–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞", worksheet_title="–ó–∞–∫–∞–∑—ã –∑–∞ —Å—É—Ç–∫–∏")
            bot._google_table.write_data("C1", "–ù–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤", worksheet_title="–ó–∞–∫–∞–∑—ã –∑–∞ —Å—É—Ç–∫–∏")
            bot._google_table.write_data("D1", "–ù–æ–≤—ã—Ö –æ—Ç–∑—ã–≤–æ–≤", worksheet_title="–ó–∞–∫–∞–∑—ã –∑–∞ —Å—É—Ç–∫–∏")
            bot.users[str(message.from_user.id)]["flag3"] = 0
            await bot.send_message(message.from_user.id, "–¢–∞–±–ª–∏—Ü–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞")
            await cmd_menu(message)
    else:
        await bot.send_message(message.from_user.id, "–ß—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫")


@dp.message_handler(text='–£–¥–∞–ª–∏—Ç—å –º–∞–≥–∞–∑–∏–Ω')
async def remove_shop(message: Message) -> None:
    bot.users[str(message.from_user.id)]["flag2"] = 1
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    menu_button = KeyboardButton("–í –º–µ–Ω—é")
    try:
        for link in bot.users[str(message.from_user.id)]['shop_links']:
            button = KeyboardButton(f"{bot.users[str(message.from_user.id)][link.split('/')[3]]['title']}")
            keyboard.add(button)
        keyboard.add(menu_button)
    except:
        keyboard.add(menu_button)
    await message.answer("üîπ –í—ã–±–µ—Ä–∏—Ç–µ –º–∞–≥–∞–∑–∏–Ω, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å üîπ", reply_markup=keyboard)


@dp.message_handler()
async def remove(message: Message) -> None:
    if not bot.users[str(message.from_user.id)]['access']:
        if str(message.text) == bot.password:
            button1 = KeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –º–∞–≥–∞–∑–∏–Ω")
            button2 = KeyboardButton("–£–¥–∞–ª–∏—Ç—å –º–∞–≥–∞–∑–∏–Ω")
            button3 = KeyboardButton("–î–æ–±–∞–≤–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É")

            keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
            keyboard.row(button1, button2).add(button3)

            bot.user_id = str(message.from_user.id)
            try:
                with open('users_ifo.json', 'r', encoding='utf8') as f:
                    user_list = json.load(f)
                check = 0
                for i in user_list:
                    for key, value in i.items():
                        if key == str(message.from_user.id):
                            check = 1
                if check:
                    for i in user_list:
                        for key, value in i.items():
                            if key == str(message.from_user.id):
                                bot.users[str(message.from_user.id)] = i[key]
                                if str(message.from_user.id) not in bot.user_ids:
                                    bot.user_ids.append(str(message.from_user.id))
                    await message.answer("üîπ –í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é üîπ", reply_markup=keyboard)
                    await message.answer("–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã",
                                         reply_markup=keyboard)
                else:
                    bot.users[str(message.from_user.id)] = {
                        "flag": 0,
                        "flag2": 0,
                        "flag3": 0,
                        "row_h": 2,
                        "row_d": 2,
                        "shop_links": [],
                        "shops_list": [],
                        "access": True,

                    }
                    if str(message.from_user.id) not in bot.user_ids:
                        bot.user_ids.append(str(message.from_user.id))
                    await message.answer("üîπ –í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é üîπ", reply_markup=keyboard)
                    await message.answer("–í –ø–µ—Ä–≤—É—é –æ—á–µ—Ä–µ–¥—å –¥–æ–±–∞–≤—å—Ç–µ —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã",
                                         reply_markup=keyboard)
            except:
                bot.users[str(message.from_user.id)] = {
                    "flag": 0,
                    "flag2": 0,
                    "flag3": 0,
                    "row_h": 2,
                    "row_d": 2,
                    "shop_links": [],
                    "shops_list": [],
                    "access": True,

                }
                if str(message.from_user.id) not in bot.user_ids:
                    bot.user_ids.append(str(message.from_user.id))

                await message.answer("üîπ –í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é üîπ", reply_markup=keyboard)
                await message.answer("–í –ø–µ—Ä–≤—É—é –æ—á–µ—Ä–µ–¥—å –¥–æ–±–∞–≤—å—Ç–µ —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã", reply_markup=keyboard)
        else:
            await message.answer("–í–≤–µ–¥–µ–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å")
    else:
        if bot.users[str(message.from_user.id)]['flag2'] == 1:
            try:
                for item in bot.users[str(message.from_user.id)]['shops_list']:
                    for key, value in item.items():
                        if str(message.text) == value['title']:
                            bot.users[str(message.from_user.id)]["shop_links"].remove(value['link'])
                            bot.users[str(message.from_user.id)]["shops_list"].remove({key: value})
                            bot.users[str(message.from_user.id)].pop(key)
                await message.answer(f'–ú–∞–≥–∞–∑–∏–Ω *{message.text}* —É–¥–∞–ª–µ–Ω', parse_mode="Markdown")

                bot.users[str(message.from_user.id)]["flag2"] = 0
                await cmd_menu(message)
            except:
                await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –º–∞–≥–∞–∑–∏–Ω, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å')
        else:
            await answer_other(message)


@dp.message_handler()
async def answer_other(message: Message) -> None:
    await message.answer('–Ø –ø–æ–Ω–∏–º–∞—é —Ç–æ–ª—å–∫–æ –∑–∞–¥–∞–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã')


async def send_hour():
    collect_data_h()
    bot.user_list = []
    for id_ in bot.user_ids:
        bot.user_list.append({id_: bot.users[id_]})
        if bot.users[id_]['sheet_link']:
            await write_cells_h(worksheet_title="–ó–∞–∫–∞–∑—ã –∑–∞ —á–∞—Å", user_id=id_)

        else:
            await bot.send_message(id_, "–í—ã –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ —Ç–∞–±–ª–∏—Ü—É")

        if len(bot.users[id_]['shop_links']) != 0:
            for link in bot.users[id_]['shop_links']:
                await bot.send_message(id_,
                                       text=f'üîª–ú–∞–≥–∞–∑–∏–Ω <b><a href="{bot.users[id_][link.split("/")[3]]["link"]}">{bot.users[id_][link.split("/")[3]]["title"]}</a></b>\n–í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: <b>{bot.users[id_][link.split("/")[3]]["info"]["orders"]}</b>\n–í—Å–µ–≥–æ –æ—Ç–∑—ã–≤–æ–≤: <b>{bot.users[id_][link.split("/")[3]]["info"]["reviews"]}</b>\n\n    üì¶–ù–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤: <b>{bot.users[id_][link.split("/")[3]]["info"]["orders"] - bot.users[id_][link.split("/")[3]]["hour"]["orders"]}</b>\n    ‚≠ê–ù–æ–≤—ã—Ö –æ—Ç–∑—ã–≤–æ–≤: <b>{bot.users[id_][link.split("/")[3]]["info"]["reviews"] - bot.users[id_][link.split("/")[3]]["hour"]["reviews"]}</b>',
                                       parse_mode="HTML", disable_web_page_preview=True)
                bot.users[id_][link.split("/")[3]]["hour"]["orders"] = bot.users[id_][link.split("/")[3]]["info"][
                    'orders']
                bot.users[id_][link.split("/")[3]]["hour"]["reviews"] = bot.users[id_][link.split("/")[3]]["info"][
                    'reviews']
            with open("users_ifo.json", "w", encoding="utf8") as f:
                json.dump(bot.user_list, f, sort_keys=False, indent=4, ensure_ascii=False)
            await bot.send_message(id_,
                                   text=f"‚úÖ–ß–∞—Å–æ–≤–æ–π –æ—Ç—á–µ—Ç‚úÖ\n–í—Ä–µ–º—è –≤—ã–≥—Ä—É–∑–∫–∏: *{datetime.datetime.now(tz=datetime.timezone(datetime.timedelta(hours=3))).strftime('%d.%m.%Y %H:%M')}:00*",
                                   parse_mode="Markdown")

        else:
            await bot.send_message(id_, "–í—ã –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ –º–∞–≥–∞–∑–∏–Ω—ã")


async def send_day():
    bot.user_list = []
    for id_ in bot.user_ids:
        bot.user_list.append({id_: bot.users[id_]})
        if bot.users[id_]['sheet_link']:
            await write_cells_d(worksheet_title="–ó–∞–∫–∞–∑—ã –∑–∞ —Å—É—Ç–∫–∏", user_id=id_)

        else:
            await bot.send_message(id_, "–í—ã –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ —Ç–∞–±–ª–∏—Ü—É")

        if len(bot.users[id_]['shop_links']) != 0:
            for link in bot.users[id_]['shop_links']:
                await bot.send_message(id_,
                                       text=f'üîª–ú–∞–≥–∞–∑–∏–Ω <b><a href="{bot.users[id_][link.split("/")[3]]["link"]}">{bot.users[id_][link.split("/")[3]]["title"]}</a></b>\n–í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: <b>{bot.users[id_][link.split("/")[3]]["info"]["orders"]}</b>\n–í—Å–µ–≥–æ –æ—Ç–∑—ã–≤–æ–≤: <b>{bot.users[id_][link.split("/")[3]]["info"]["reviews"]}</b>\n\n    üì¶–ù–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤: <b>{bot.users[id_][link.split("/")[3]]["info"]["orders"] - bot.users[id_][link.split("/")[3]]["day"]["orders"]}</b>\n    ‚≠ê–ù–æ–≤—ã—Ö –æ—Ç–∑—ã–≤–æ–≤: <b>{bot.users[id_][link.split("/")[3]]["info"]["reviews"] - bot.users[id_][link.split("/")[3]]["day"]["reviews"]}</b>',
                                       parse_mode="HTML", disable_web_page_preview=True)
                bot.users[id_][link.split("/")[3]]["day"]["orders"] = bot.users[id_][link.split("/")[3]]["info"][
                    'orders']
                bot.users[id_][link.split("/")[3]]["day"]["reviews"] = bot.users[id_][link.split("/")[3]]["info"][
                    'reviews']
            with open("users_ifo.json", "w", encoding="utf8") as f:
                json.dump(bot.user_list, f, sort_keys=False, indent=4, ensure_ascii=False)
            await bot.send_message(id_,
                                   text=f"‚úÖ–î–Ω–µ–≤–Ω–æ–π –æ—Ç—á–µ—Ç‚úÖ\n–í—Ä–µ–º—è –≤—ã–≥—Ä—É–∑–∫–∏: *{datetime.datetime.now(tz=datetime.timezone(datetime.timedelta(hours=3))).strftime('%d.%m.%Y %H')}:00:00*",
                                   parse_mode="Markdown")
        else:
            await bot.send_message(id_, "–í—ã –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ –º–∞–≥–∞–∑–∏–Ω—ã")


async def write_cells_h(worksheet_title: str, user_id) -> None:
    bot._google_table = GoogleTable("key.json", bot.users[user_id]['sheet_link'])
    bot._google_table.write_cells(
        crange=f'A{str(bot.users[user_id]["row_h"])}:A{str(bot.users[user_id]["row_h"] + len(bot.users[user_id]["list_time"]))}',
        values=bot.users[user_id]["list_time"], worksheet_title=worksheet_title)
    bot._google_table.write_cells(
        crange=f'B{str(bot.users[user_id]["row_h"])}:B{str(bot.users[user_id]["row_h"] + len(bot.users[user_id]["list_titles"]))}',
        values=bot.users[user_id]["list_titles"], worksheet_title=worksheet_title)
    bot._google_table.write_cells(
        crange=f'C{str(bot.users[user_id]["row_h"])}:C{str(bot.users[user_id]["row_h"] + len(bot.users[user_id]["list_orders"]))}',
        values=bot.users[user_id]["list_orders"], worksheet_title=worksheet_title)
    bot._google_table.write_cells(
        crange=f'D{str(bot.users[user_id]["row_h"])}:D{str(bot.users[user_id]["row_h"] + len(bot.users[user_id]["list_reviews"]))}',
        values=bot.users[user_id]["list_reviews"], worksheet_title=worksheet_title)
    bot.users[user_id]['row_h'] += len(bot.users[user_id]["list_reviews"])


async def write_cells_d(worksheet_title: str, user_id):
    bot._google_table = GoogleTable("key.json", bot.users[user_id]['sheet_link'])
    bot._google_table.write_cells(
        crange=f'A{str(bot.users[user_id]["row_d"])}:A{str(bot.users[user_id]["row_d"] + len(bot.users[user_id]["list_time"]))}',
        values=bot.users[user_id]["list_time"], worksheet_title=worksheet_title)
    bot._google_table.write_cells(
        crange=f'B{str(bot.users[user_id]["row_d"])}:B{str(bot.users[user_id]["row_d"] + len(bot.users[user_id]["list_titles"]))}',
        values=bot.users[user_id]["list_titles"], worksheet_title=worksheet_title)
    bot._google_table.write_cells(
        crange=f'C{str(bot.users[user_id]["row_d"])}:C{str(bot.users[user_id]["row_d"] + len(bot.users[user_id]["list_orders"]))}',
        values=bot.users[user_id]["list_orders"], worksheet_title=worksheet_title)
    bot._google_table.write_cells(
        crange=f'D{str(bot.users[user_id]["row_d"])}:D{str(bot.users[user_id]["row_d"] + len(bot.users[user_id]["list_reviews"]))}',
        values=bot.users[user_id]["list_reviews"], worksheet_title=worksheet_title)
    bot.users[user_id]['row_d'] += len(bot.users[user_id]["list_reviews"])


def collect_data_h():
    for id_ in bot.user_ids:
        bot.users[id_]["list_time"] = []
        bot.users[id_]["list_titles"] = []
        bot.users[id_]["list_orders"] = []
        bot.users[id_]["list_reviews"] = []
        for link in bot.users[id_]['shop_links']:
            bot.users[id_][link.split('/')[3]]["info"] = parse(link)
            bot.users[id_]["list_time"].append([str(datetime.datetime.now(
                tz=datetime.timezone(datetime.timedelta(hours=3))).strftime('%d.%m.%Y %H:%M')) + ':00'])
            bot.users[id_]["list_titles"].append([bot.users[id_][link.split('/')[3]]["info"]['title']])
            bot.users[id_]["list_orders"].append([bot.users[id_][link.split('/')[3]]["info"]['orders'] -
                                                  bot.users[id_][link.split('/')[3]]["hour"]['orders']])
            bot.users[id_]["list_reviews"].append([bot.users[id_][link.split('/')[3]]["info"]['reviews'] -
                                                   bot.users[id_][link.split('/')[3]]["hour"]['reviews']])


async def collect_data_d():
    for id_ in bot.user_ids:
        bot.users[id_]["list_time"] = []
        bot.users[id_]["list_titles"] = []
        bot.users[id_]["list_orders"] = []
        bot.users[id_]["list_reviews"] = []
        for link in bot.users[id_]['shop_links']:
            bot.users[id_][link.split('/')[3]]["info"] = parse(link)
            bot.users[id_]["list_time"].append([str(datetime.datetime.now(
                tz=datetime.timezone(datetime.timedelta(hours=3, minutes=1))).strftime('%d.%m.%Y %H:%M')) + ':00'])
            bot.users[id_]["list_titles"].append([bot.users[id_][link.split('/')[3]]["info"]['title']])
            bot.users[id_]["list_orders"].append([bot.users[id_][link.split('/')[3]]["info"]['orders'] -
                                                  bot.users[id_][link.split('/')[3]]["day"]['orders']])
            bot.users[id_]["list_reviews"].append([bot.users[id_][link.split('/')[3]]["info"]['reviews'] -
                                                   bot.users[id_][link.split('/')[3]]["day"]['reviews']])
    print('–¥–∞–Ω–Ω—ã–µ —Å–æ–±—Ä–∞–Ω—ã')


async def scheduler():
    schedule.every().day.at("00:00").do(collect_data_d)
    schedule.every().day.at("00:00").do(send_hour)
    schedule.every().day.at("00:01").do(send_day)
    schedule.every().day.at("01:00").do(send_hour)
    schedule.every().day.at("02:00").do(send_hour)
    schedule.every().day.at("03:00").do(send_hour)
    schedule.every().day.at("04:00").do(send_hour)
    schedule.every().day.at("05:00").do(send_hour)
    schedule.every().day.at("06:00").do(send_hour)
    schedule.every().day.at("07:00").do(send_hour)
    schedule.every().day.at("08:00").do(send_hour)
    schedule.every().day.at("09:00").do(send_hour)
    schedule.every().day.at("10:00").do(send_hour)
    schedule.every().day.at("11:00").do(send_hour)
    schedule.every().day.at("12:00").do(send_hour)
    schedule.every().day.at("13:00").do(send_hour)
    schedule.every().day.at("14:00").do(send_hour)
    schedule.every().day.at("15:00").do(send_hour)
    schedule.every().day.at("16:00").do(send_hour)
    schedule.every().day.at("17:00").do(send_hour)
    schedule.every().day.at("18:00").do(send_hour)
    schedule.every().day.at("19:00").do(send_hour)
    schedule.every().day.at("20:00").do(send_hour)
    schedule.every().day.at("21:00").do(send_hour)
    schedule.every().day.at("22:00").do(send_hour)
    schedule.every().day.at("23:00").do(send_hour)
    schedule.every().day.at("14:35").do(collect_data_d)
    schedule.every().day.at("14:35").do(send_hour)
    schedule.every().day.at("14:36").do(send_day)

    while True:
        await schedule.run_pending()
        await asyncio.sleep(1)


async def on_startup(s):
    asyncio.create_task(scheduler())


executor.start_polling(dp, skip_updates=True, on_startup=on_startup)

# 1
